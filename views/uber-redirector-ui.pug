doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Uber Deep Link Redirector
    link(href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap", rel="stylesheet")
    style.
      :root {
        --primary-color: #3498db;
        --secondary-color: #2ecc71;
        --text-color: #333;
        --background-color: #f8f9fa;
        --card-background: #ffffff;
        --border-color: #e0e0e0;
        --shadow: rgba(0, 0, 0, 0.1);
        --danger-color: #e74c3c;
        --warning-bg: #fff3e0; /* Light orange for warnings */
        --warning-text: #e65100; /* Darker orange for warning text */
      }
      body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--background-color);
        color: var(--text-color);
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        margin: 0;
        padding: 20px;
        box-sizing: border-box;
        transition: background-color 0.3s ease;
      }
      .container {
        background-color: var(--card-background);
        border-radius: 12px;
        box-shadow: 0 6px 15px var(--shadow);
        padding: 40px;
        width: 100%;
        max-width: 500px;
        text-align: center;
        position: relative;
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
      }
      h1 {
        color: var(--primary-color);
        margin-bottom: 30px;
        font-weight: 600;
      }
      .form-group {
        margin-bottom: 25px;
        text-align: left;
      }
      label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: var(--text-color);
      }
      input[type="text"] {
        width: calc(100% - 24px); /* Account for padding */
        padding: 12px;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        font-size: 1em;
        transition: border-color 0.3s ease;
      }
      input[type="text"]:focus {
        border-color: var(--primary-color);
        outline: none;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
      }
      .coordinate-display {
        background-color: #f0f4f7;
        border: 1px dashed var(--border-color);
        border-radius: 8px;
        padding: 15px;
        margin-top: 20px;
        font-size: 0.95em;
        color: #555;
      }
      .coordinate-display p {
        margin: 5px 0;
      }
      button {
        background-color: var(--secondary-color);
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: 8px;
        font-size: 1.1em;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
        margin-top: 30px;
        box-shadow: 0 4px 10px rgba(46, 204, 113, 0.3);
      }
      button:hover {
        background-color: #27ae60;
        transform: translateY(-2px);
      }
      button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
        box-shadow: none;
      }
      .error-message {
        color: var(--danger-color);
        margin-top: 10px;
        font-size: 0.9em;
      }

      /* --- Auto-Redirect Overlay Styles --- */
      .auto-redirect-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.9); /* Dark overlay */
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: white;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.4s ease, visibility 0.4s ease;
        text-align: center;
      }
      .auto-redirect-overlay.active {
        opacity: 1;
        visibility: visible;
      }
      .auto-redirect-overlay h2 {
        font-size: 2.5em;
        margin-bottom: 20px;
        color: var(--primary-color);
      }
      .countdown-circle {
        position: relative;
        width: 150px;
        height: 150px;
        border-radius: 50%;
        border: 8px solid rgba(255, 255, 255, 0.3);
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 30px;
        font-size: 3.5em;
        font-weight: 700;
        color: var(--secondary-color);
        background-color: rgba(255, 255, 255, 0.1);
      }
      .countdown-circle::before {
        content: '';
        position: absolute;
        top: -8px; /* Match border thickness */
        left: -8px;
        right: -8px;
        bottom: -8px;
        border: 8px solid var(--secondary-color);
        border-radius: 50%;
        clip-path: inset(0 0 100% 0); /* Initial state of animation */
        animation: countdown-fill 5s linear forwards; /* Controlled by JS later */
        animation-play-state: paused;
      }
      .auto-redirect-overlay .cancel-btn {
        background-color: var(--danger-color);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 8px;
        font-size: 1em;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-top: 20px;
      }
      .auto-redirect-overlay .cancel-btn:hover {
        background-color: #c0392b;
      }

      @keyframes countdown-fill {
        0% { clip-path: inset(0 0 100% 0); }
        100% { clip-path: inset(0 0 0% 0); } /* Fill from top to bottom */
      }
      
      /* Stop animation when cancelled */
      .auto-redirect-overlay.paused .countdown-circle::before {
          animation-play-state: paused;
      }

      /* Responsive adjustments for smaller screens */
      @media (max-width: 600px) {
        .container {
          padding: 25px;
          margin: 10px;
        }
        h1 {
          font-size: 1.8em;
          margin-bottom: 20px;
        }
        .form-group label {
          font-size: 0.9em;
        }
        input[type="text"] {
          padding: 10px;
          font-size: 0.9em;
        }
        button {
          padding: 12px 25px;
          font-size: 1em;
        }
        .auto-redirect-overlay h2 {
          font-size: 1.8em;
          margin: 0 20px 20px; /* Reduce side margin on mobile */
        }
        .countdown-circle {
          width: 120px;
          height: 120px;
          font-size: 3em;
        }
        .auto-redirect-overlay .cancel-btn {
          padding: 10px 20px;
          font-size: 0.9em;
        }
      }

  body
    .container
      h1 Uber Dropoff Redirector
      
      .form-group
        label(for="latLonInput") Enter Latitude,Longitude:
        input(type="text", id="latLonInput", placeholder="e.g., 28.5127698,76.7758902", value=initialInput || '')

      .coordinate-display
        p Latitude: #[strong#displayLat= initialLat || 'N/A']
        p Longitude: #[strong#displayLon= initialLon || 'N/A']
      
      .error-message#errorMessage

      button#redirectButton(disabled=(!initialLat || !initialLon)) Redirect to Uber App

    .auto-redirect-overlay#autoRedirectOverlay
      h2 Redirecting to Uber App...
      .countdown-circle
        span#countdown 5
      button.cancel-btn#cancelRedirectButton(type="button") Cancel Redirect

      script.
        const latLonInput = document.getElementById('latLonInput');
        const displayLat = document.getElementById('displayLat');
        const displayLon = document.getElementById('displayLon');
        const redirectButton = document.getElementById('redirectButton');
        const errorMessage = document.getElementById('errorMessage');
        const autoRedirectOverlay = document.getElementById('autoRedirectOverlay');
        const countdownSpan = document.getElementById('countdown');
        const cancelRedirectButton = document.getElementById('cancelRedirectButton');
        const countdownCircle = document.querySelector('.countdown-circle');

        let currentLat = !{JSON.stringify(initialLat)};
        let currentLon = !{JSON.stringify(initialLon)};
        const autoRedirectEnabled = !{JSON.stringify(autoRedirect)};

        const REDIRECT_DELAY_SECONDS = 5;
        let countdownTimer;
        let countdownValue = REDIRECT_DELAY_SECONDS;
        let autoRedirectScheduled = false;

        function validateAndDisplayCoordinates() {
          const inputValue = latLonInput.value.trim();
          errorMessage.innerText = '';
          redirectButton.disabled = true;

          if (inputValue === '') {
            displayLat.innerText = 'N/A';
            displayLon.innerText = 'N/A';
            currentLat = '';
            currentLon = '';
            return;
          }

          const parts = inputValue.split(',');
          if (parts.length === 2) {
            const lat = parseFloat(parts[0].trim());
            const lon = parseFloat(parts[1].trim());

            if (!isNaN(lat) && !isNaN(lon) && lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180) {
              currentLat = lat.toFixed(7);
              currentLon = lon.toFixed(7);
              displayLat.innerText = currentLat;
              displayLon.innerText = currentLon;
              redirectButton.disabled = false;
            } else {
              errorMessage.innerText = 'Invalid latitude or longitude. Please enter valid numbers (e.g., 28.5,77.3).';
              displayLat.innerText = 'Invalid';
              displayLon.innerText = 'Invalid';
              currentLat = '';
              currentLon = '';
            }
          } else {
            errorMessage.innerText = 'Invalid format. Please use "latitude,longitude" (e.g., 28.5,-77.3).';
            displayLat.innerText = 'Invalid';
            displayLon.innerText = 'Invalid';
            currentLat = '';
            currentLon = '';
          }
        }

        function initiateUberRedirect() {
            if (currentLat && currentLon) {
                const uberDeepLink = `uber://?action=setPickup&pickup=my_location&dropoff[latitude]=${currentLat}&dropoff[longitude]=${currentLon}`;
                const fullRedirectorUrl = `/?url=${encodeURIComponent(uberDeepLink)}`;
                window.location.href = fullRedirectorUrl;
            } else {
                errorMessage.innerText = 'Please enter valid coordinates before redirecting.';
            }
        }

        function startAutoRedirectCountdown() {
            if (autoRedirectScheduled || !autoRedirectEnabled || !currentLat || !currentLon) {
                return;
            }
            autoRedirectScheduled = true;
            
            // Activate the overlay
            autoRedirectOverlay.classList.add('active');
            
            // Reset countdown value and display
            countdownValue = REDIRECT_DELAY_SECONDS;
            countdownSpan.innerText = countdownValue;

            // Reset and start animation
            countdownCircle.style.animation = 'none'; // Clear previous animation
            void countdownCircle.offsetWidth; // Trigger reflow
            countdownCircle.style.animation = `countdown-fill ${REDIRECT_DELAY_SECONDS}s linear forwards`;

            countdownTimer = setInterval(() => {
                countdownValue--;
                countdownSpan.innerText = countdownValue;
                if (countdownValue <= 0) {
                    clearInterval(countdownTimer);
                    initiateUberRedirect();
                }
            }, 1000);
        }

        function cancelAutoRedirect() {
            if (countdownTimer) {
                clearInterval(countdownTimer);
            }
            autoRedirectScheduled = false;
            autoRedirectOverlay.classList.remove('active'); // Hide overlay
            countdownCircle.style.animationPlayState = 'paused'; // Pause animation if active
            errorMessage.innerText = 'Auto-redirect cancelled. You can modify input or redirect manually.';
        }

        // --- Event Listeners and Initial Load ---
        document.addEventListener('DOMContentLoaded', () => {
          // Initial validation and display on page load if input is present
          if (latLonInput.value) {
            validateAndDisplayCoordinates();
          }

          // If autoRedirect is enabled AND we have valid initial coordinates, start countdown
          if (autoRedirectEnabled && currentLat && currentLon) {
            startAutoRedirectCountdown();
          }
        });

        latLonInput.addEventListener('input', () => {
            validateAndDisplayCoordinates();
            if (autoRedirectScheduled) {
                cancelAutoRedirect();
            }
        });
        redirectButton.addEventListener('click', () => {
            if (autoRedirectScheduled) {
                cancelAutoRedirect();
            }
            initiateUberRedirect();
        });
        cancelRedirectButton.addEventListener('click', cancelAutoRedirect);