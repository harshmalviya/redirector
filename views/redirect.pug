doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Uber Deep Link Redirector
    link(href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap", rel="stylesheet")
    style.
      :root {
        --primary-color: #3498db;
        --secondary-color: #2ecc71;
        --text-color: #333;
        --background-color: #f8f9fa;
        --card-background: #ffffff;
        --border-color: #e0e0e0;
        --shadow: rgba(0, 0, 0, 0.1);
      }
      body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--background-color);
        color: var(--text-color);
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        margin: 0;
        padding: 20px;
        box-sizing: border-box;
      }
      .container {
        background-color: var(--card-background);
        border-radius: 12px;
        box-shadow: 0 6px 15px var(--shadow);
        padding: 40px;
        width: 100%;
        max-width: 500px;
        text-align: center;
      }
      h1 {
        color: var(--primary-color);
        margin-bottom: 30px;
        font-weight: 600;
      }
      .form-group {
        margin-bottom: 25px;
        text-align: left;
      }
      label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: var(--text-color);
      }
      input[type="text"] {
        width: calc(100% - 24px); /* Account for padding */
        padding: 12px;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        font-size: 1em;
        transition: border-color 0.3s ease;
      }
      input[type="text"]:focus {
        border-color: var(--primary-color);
        outline: none;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
      }
      .coordinate-display {
        background-color: #f0f4f7;
        border: 1px dashed var(--border-color);
        border-radius: 8px;
        padding: 15px;
        margin-top: 20px;
        font-size: 0.95em;
        color: #555;
      }
      .coordinate-display p {
        margin: 5px 0;
      }
      button {
        background-color: var(--secondary-color);
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: 8px;
        font-size: 1.1em;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
        margin-top: 30px;
        box-shadow: 0 4px 10px rgba(46, 204, 113, 0.3);
      }
      button:hover {
        background-color: #27ae60;
        transform: translateY(-2px);
      }
      button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
        box-shadow: none;
      }
      .error-message {
        color: #e74c3c;
        margin-top: 10px;
        font-size: 0.9em;
      }
      #uberRedirectLink {
          display: none; /* Hidden by default */
      }

  body
    .container
      h1 Uber Dropoff Redirector
      .form-group
        label(for="latLonInput") Enter Latitude,Longitude:
        input(type="text", id="latLonInput", placeholder="e.g., 28.5127698,76.7758902", value=initialInput || '')

      .coordinate-display
        p Latitude: #[strong#displayLat= initialLat || 'N/A']
        p Longitude: #[strong#displayLon= initialLon || 'N/A']
      
      .error-message#errorMessage

      button#redirectButton(disabled=(!initialLat || !initialLon)) Redirect to Uber App

      // Hidden link that will be triggered by JS
      a#uberRedirectLink(href="#", target="_blank", rel="noopener noreferrer")

      script.
        const latLonInput = document.getElementById('latLonInput');
        const displayLat = document.getElementById('displayLat');
        const displayLon = document.getElementById('displayLon');
        const redirectButton = document.getElementById('redirectButton');
        const errorMessage = document.getElementById('errorMessage');
        const uberRedirectLink = document.getElementById('uberRedirectLink');

        let currentLat = !{JSON.stringify(initialLat)};
        let currentLon = !{JSON.stringify(initialLon)};

        function validateAndDisplayCoordinates() {
          const inputValue = latLonInput.value.trim();
          errorMessage.innerText = ''; // Clear previous errors
          redirectButton.disabled = true; // Disable button by default

          if (inputValue === '') {
            displayLat.innerText = 'N/A';
            displayLon.innerText = 'N/A';
            currentLat = '';
            currentLon = '';
            return;
          }

          const parts = inputValue.split(',');
          if (parts.length === 2) {
            const lat = parseFloat(parts[0].trim());
            const lon = parseFloat(parts[1].trim());

            if (!isNaN(lat) && !isNaN(lon) && lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180) {
              currentLat = lat.toFixed(7);
              currentLon = lon.toFixed(7);
              displayLat.innerText = currentLat;
              displayLon.innerText = currentLon;
              redirectButton.disabled = false;
            } else {
              errorMessage.innerText = 'Invalid latitude or longitude. Please enter valid numbers (e.g., 28.5,77.3).';
              displayLat.innerText = 'Invalid';
              displayLon.innerText = 'Invalid';
              currentLat = '';
              currentLon = '';
            }
          } else {
            errorMessage.innerText = 'Invalid format. Please use "latitude,longitude" (e.g., 28.5,-77.3).';
            displayLat.innerText = 'Invalid';
            displayLon.innerText = 'Invalid';
            currentLat = '';
            currentLon = '';
          }
        }

        function redirectToUber() {
            if (currentLat && currentLon) {
                // Encode the Uber deep link properly
                const uberDeepLink = `uber://?action=setPickup&pickup=my_location&dropoff[latitude]=${currentLat}&dropoff[longitude]=${currentLon}`;
                
                // Construct the full redirector URL to use the existing / path
                // We must encode the uberDeepLink as it will be a query parameter to our root redirector
                const fullRedirectorUrl = `/?url=${encodeURIComponent(uberDeepLink)}`;
                
                window.location.href = fullRedirectorUrl;
            } else {
                errorMessage.innerText = 'Please enter valid coordinates before redirecting.';
            }
        }

        // Initial validation and display on page load if input is present
        document.addEventListener('DOMContentLoaded', () => {
          if (latLonInput.value) {
            validateAndDisplayCoordinates();
          }
        });

        latLonInput.addEventListener('input', validateAndDisplayCoordinates);
        redirectButton.addEventListener('click', redirectToUber);